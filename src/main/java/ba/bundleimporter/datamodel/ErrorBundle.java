/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ba.bundleimporter.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ErrorBundle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6678591616434615010L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ErrorBundle\",\"namespace\":\"ba.bundleimporter.datamodel\",\"fields\":[{\"name\":\"bundleId\",\"type\":\"string\"},{\"name\":\"Reason\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ErrorBundle> ENCODER =
      new BinaryMessageEncoder<ErrorBundle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ErrorBundle> DECODER =
      new BinaryMessageDecoder<ErrorBundle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ErrorBundle> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ErrorBundle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ErrorBundle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ErrorBundle>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ErrorBundle to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ErrorBundle from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ErrorBundle instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ErrorBundle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence bundleId;
   private java.lang.CharSequence Reason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ErrorBundle() {}

  /**
   * All-args constructor.
   * @param bundleId The new value for bundleId
   * @param Reason The new value for Reason
   */
  public ErrorBundle(java.lang.CharSequence bundleId, java.lang.CharSequence Reason) {
    this.bundleId = bundleId;
    this.Reason = Reason;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bundleId;
    case 1: return Reason;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bundleId = (java.lang.CharSequence)value$; break;
    case 1: Reason = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bundleId' field.
   * @return The value of the 'bundleId' field.
   */
  public java.lang.CharSequence getBundleId() {
    return bundleId;
  }


  /**
   * Sets the value of the 'bundleId' field.
   * @param value the value to set.
   */
  public void setBundleId(java.lang.CharSequence value) {
    this.bundleId = value;
  }

  /**
   * Gets the value of the 'Reason' field.
   * @return The value of the 'Reason' field.
   */
  public java.lang.CharSequence getReason() {
    return Reason;
  }


  /**
   * Sets the value of the 'Reason' field.
   * @param value the value to set.
   */
  public void setReason(java.lang.CharSequence value) {
    this.Reason = value;
  }

  /**
   * Creates a new ErrorBundle RecordBuilder.
   * @return A new ErrorBundle RecordBuilder
   */
  public static ba.bundleimporter.datamodel.ErrorBundle.Builder newBuilder() {
    return new ba.bundleimporter.datamodel.ErrorBundle.Builder();
  }

  /**
   * Creates a new ErrorBundle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ErrorBundle RecordBuilder
   */
  public static ba.bundleimporter.datamodel.ErrorBundle.Builder newBuilder(ba.bundleimporter.datamodel.ErrorBundle.Builder other) {
    if (other == null) {
      return new ba.bundleimporter.datamodel.ErrorBundle.Builder();
    } else {
      return new ba.bundleimporter.datamodel.ErrorBundle.Builder(other);
    }
  }

  /**
   * Creates a new ErrorBundle RecordBuilder by copying an existing ErrorBundle instance.
   * @param other The existing instance to copy.
   * @return A new ErrorBundle RecordBuilder
   */
  public static ba.bundleimporter.datamodel.ErrorBundle.Builder newBuilder(ba.bundleimporter.datamodel.ErrorBundle other) {
    if (other == null) {
      return new ba.bundleimporter.datamodel.ErrorBundle.Builder();
    } else {
      return new ba.bundleimporter.datamodel.ErrorBundle.Builder(other);
    }
  }

  /**
   * RecordBuilder for ErrorBundle instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ErrorBundle>
    implements org.apache.avro.data.RecordBuilder<ErrorBundle> {

    private java.lang.CharSequence bundleId;
    private java.lang.CharSequence Reason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ba.bundleimporter.datamodel.ErrorBundle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bundleId)) {
        this.bundleId = data().deepCopy(fields()[0].schema(), other.bundleId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Reason)) {
        this.Reason = data().deepCopy(fields()[1].schema(), other.Reason);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing ErrorBundle instance
     * @param other The existing instance to copy.
     */
    private Builder(ba.bundleimporter.datamodel.ErrorBundle other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bundleId)) {
        this.bundleId = data().deepCopy(fields()[0].schema(), other.bundleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Reason)) {
        this.Reason = data().deepCopy(fields()[1].schema(), other.Reason);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'bundleId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBundleId() {
      return bundleId;
    }


    /**
      * Sets the value of the 'bundleId' field.
      * @param value The value of 'bundleId'.
      * @return This builder.
      */
    public ba.bundleimporter.datamodel.ErrorBundle.Builder setBundleId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bundleId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bundleId' field has been set.
      * @return True if the 'bundleId' field has been set, false otherwise.
      */
    public boolean hasBundleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bundleId' field.
      * @return This builder.
      */
    public ba.bundleimporter.datamodel.ErrorBundle.Builder clearBundleId() {
      bundleId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Reason' field.
      * @return The value.
      */
    public java.lang.CharSequence getReason() {
      return Reason;
    }


    /**
      * Sets the value of the 'Reason' field.
      * @param value The value of 'Reason'.
      * @return This builder.
      */
    public ba.bundleimporter.datamodel.ErrorBundle.Builder setReason(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Reason = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Reason' field has been set.
      * @return True if the 'Reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Reason' field.
      * @return This builder.
      */
    public ba.bundleimporter.datamodel.ErrorBundle.Builder clearReason() {
      Reason = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ErrorBundle build() {
      try {
        ErrorBundle record = new ErrorBundle();
        record.bundleId = fieldSetFlags()[0] ? this.bundleId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Reason = fieldSetFlags()[1] ? this.Reason : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ErrorBundle>
    WRITER$ = (org.apache.avro.io.DatumWriter<ErrorBundle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ErrorBundle>
    READER$ = (org.apache.avro.io.DatumReader<ErrorBundle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bundleId);

    out.writeString(this.Reason);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bundleId = in.readString(this.bundleId instanceof Utf8 ? (Utf8)this.bundleId : null);

      this.Reason = in.readString(this.Reason instanceof Utf8 ? (Utf8)this.Reason : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bundleId = in.readString(this.bundleId instanceof Utf8 ? (Utf8)this.bundleId : null);
          break;

        case 1:
          this.Reason = in.readString(this.Reason instanceof Utf8 ? (Utf8)this.Reason : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










